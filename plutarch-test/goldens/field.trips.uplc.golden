lam.tripSum (program 1.0.0 (\i0 -> (\i0 -> (\i0 -> addInteger (addInteger (unIData (force headList i2)) (unIData (force headList i1))) (unIData (force headList (force tailList i1)))) (force tailList i1)) (force (force sndPair) (unConstrData i1))))
lam.getY (program 1.0.0 (\i0 -> force headList (force tailList (force (force sndPair) (unConstrData i1)))))
lam.tripYZ (program 1.0.0 (\i0 -> (\i0 -> addInteger (unIData (force headList i1)) (unIData (force headList (force tailList i1)))) (force tailList (force (force sndPair) (unConstrData i1)))))
tripSum.A (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> addInteger (addInteger (unIData (force headList i2)) (unIData (force headList i1))) (unIData (force headList (force tailList i1)))) (force tailList i1)) (force (force sndPair) (unConstrData i1))) (constrData 0 (force mkCons (iData 150) (force mkCons (iData 750) (force mkCons (iData 100) [  ]))))))
tripSum.B (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> addInteger (addInteger (unIData (force headList i2)) (unIData (force headList i1))) (unIData (force headList (force tailList i1)))) (force tailList i1)) (force (force sndPair) (unConstrData i1))) (constrData 0 (force mkCons (iData 50) (force mkCons (iData 10) (force mkCons (iData 40) [  ]))))))
tripSum.C (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> addInteger (addInteger (unIData (force headList i2)) (unIData (force headList i1))) (unIData (force headList (force tailList i1)))) (force tailList i1)) (force (force sndPair) (unConstrData i1))) (constrData 0 (force mkCons (iData 1) (force mkCons (iData 8) (force mkCons (iData 1) [  ]))))))
tripYZ=tripZY (program 1.0.0 (\i0 -> (\i0 -> addInteger (unIData (force headList i1)) (unIData (force headList (force tailList i1)))) (force tailList (force (force sndPair) (unConstrData i1)))))