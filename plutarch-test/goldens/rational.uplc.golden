literal (program 1.0.0 (\i0 -> i1 1 2))
ops.+ (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (addInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (i1 (\i0 -> i1 1 1) (\i0 -> i1 2 1)) (i1 (\i0 -> i1 1 1) (\i0 -> i1 2 1))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))))
ops.- (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (i1 (\i0 -> i1 1 1) (\i0 -> i1 2 1)) (i1 (\i0 -> i1 1 1) (\i0 -> i1 3 1))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))))
ops.* (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i5 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i3) (multiplyInteger i4 i2))))) (i1 (\i0 -> i1 1 1) (i2 (\i0 -> i1 3 1) (\i0 -> i1 2 1))) (i1 (\i0 -> i1 2 1) (i2 (\i0 -> i1 5 1) (\i0 -> i1 2 1)))) (\i0 -> \i0 -> i4 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2)))))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))))
ops.harmonic-sum (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (i1 (i1 (i2 (\i0 -> i1 1 1) (\i0 -> i1 2 1)) (i2 (\i0 -> i1 1 1) (\i0 -> i1 3 1))) (i2 (\i0 -> i1 1 1) (\i0 -> i1 4 1))) (i2 (\i0 -> i1 1 1) (\i0 -> i1 5 1))) (\i0 -> \i0 -> i4 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (addInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2)))))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))))
ops.multi-product (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (i1 (i2 (i1 (i2 (i1 (i2 (i1 (i2 (\i0 -> i1 1 1) (\i0 -> i1 2 1)) (\i0 -> i1 2 1)) (\i0 -> i1 3 1)) (\i0 -> i1 3 1)) (\i0 -> i1 4 1)) (\i0 -> i1 4 1)) (\i0 -> i1 5 1)) (\i0 -> i1 5 1)) (\i0 -> i1 6 1)) (\i0 -> \i0 -> i4 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i3) (multiplyInteger i4 i2)))))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))))
compare (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> lessThanInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (i1 (\i0 -> i1 2 1) (\i0 -> i1 9 1)) (i1 (\i0 -> i1 3 1) (\i0 -> i1 10 1))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))))
round.5/3 (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> addInteger i2 (force (force ifThenElse (equalsInteger (modInteger i3 2) 1) (delay (force (force ifThenElse (lessThanInteger (divideInteger i3 2) i1) (delay 1) (delay 0)))) (delay (force (force ifThenElse (equalsInteger (divideInteger i3 2) i1) (delay (modInteger i2 2)) (delay (force (force ifThenElse (lessThanInteger i1 (divideInteger i3 2)) (delay 0) (delay 1)))))))))) (modInteger i3 i2)) (divideInteger i2 i1))) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (force ifThenElse (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 5 1) (\i0 -> i1 3 1))))
round.4/3 (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> addInteger i2 (force (force ifThenElse (equalsInteger (modInteger i3 2) 1) (delay (force (force ifThenElse (lessThanInteger (divideInteger i3 2) i1) (delay 1) (delay 0)))) (delay (force (force ifThenElse (equalsInteger (divideInteger i3 2) i1) (delay (modInteger i2 2)) (delay (force (force ifThenElse (lessThanInteger i1 (divideInteger i3 2)) (delay 0) (delay 1)))))))))) (modInteger i3 i2)) (divideInteger i2 i1))) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (force ifThenElse (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 4 1) (\i0 -> i1 3 1))))
round.-5/2 (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> addInteger i2 (force (force ifThenElse (equalsInteger (modInteger i3 2) 1) (delay (force (force ifThenElse (lessThanInteger (divideInteger i3 2) i1) (delay 1) (delay 0)))) (delay (force (force ifThenElse (equalsInteger (divideInteger i3 2) i1) (delay (modInteger i2 2)) (delay (force (force ifThenElse (lessThanInteger i1 (divideInteger i3 2)) (delay 0) (delay 1)))))))))) (modInteger i3 i2)) (divideInteger i2 i1))) ((\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger 0 i3) i2)) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (force ifThenElse (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 5 1) (\i0 -> i1 2 1)))))
round.-1/4 (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> addInteger i2 (force (force ifThenElse (equalsInteger (modInteger i3 2) 1) (delay (force (force ifThenElse (lessThanInteger (divideInteger i3 2) i1) (delay 1) (delay 0)))) (delay (force (force ifThenElse (equalsInteger (divideInteger i3 2) i1) (delay (modInteger i2 2)) (delay (force (force ifThenElse (lessThanInteger i1 (divideInteger i3 2)) (delay 0) (delay 1)))))))))) (modInteger i3 i2)) (divideInteger i2 i1))) ((\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger 0 i3) i2)) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (force ifThenElse (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 1 1) (\i0 -> i1 4 1)))))
truncate.5/4 (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> (\i0 -> force (force ifThenElse (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (force ifThenElse (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1))) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (force ifThenElse (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 5 1) (\i0 -> i1 4 1))))
truncate.7/4 (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> (\i0 -> force (force ifThenElse (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (force ifThenElse (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1))) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (force ifThenElse (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 7 1) (\i0 -> i1 4 1))))
truncate.1/4 (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> (\i0 -> force (force ifThenElse (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (force ifThenElse (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1))) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (force ifThenElse (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 1 1) (\i0 -> i1 4 1))))
truncate.-7/4 (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> (\i0 -> force (force ifThenElse (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (force ifThenElse (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1))) ((\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger 0 i3) i2)) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (force ifThenElse (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 7 1) (\i0 -> i1 4 1)))))
properFraction.-1/2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i2 ((\i0 -> i7 (i4 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (\i0 -> i1 i3 1))) (i1 (\i0 -> \i0 -> (\i0 -> force (force ifThenElse (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (force ifThenElse (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1)))) (i1 (i2 (\i0 -> i1 1 1) (\i0 -> i1 2 1))) (\i0 -> \i0 -> force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (equalsInteger i2 0) (delay ((\i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> equalsInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (i3 (i4 (\i0 -> i1 1 1) (\i0 -> i1 2 1)))))))) (\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger 0 i3) i2))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))))
properFraction.-3/2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i2 ((\i0 -> i7 (i4 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (\i0 -> i1 i3 1))) (i1 (\i0 -> \i0 -> (\i0 -> force (force ifThenElse (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (force ifThenElse (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1)))) (i1 (i2 (\i0 -> i1 3 1) (\i0 -> i1 2 1))) (\i0 -> \i0 -> force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (equalsInteger i2 (subtractInteger 0 1)) (delay ((\i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> equalsInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (i3 (i4 (\i0 -> i1 1 1) (\i0 -> i1 2 1)))))))) (\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger 0 i3) i2))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))))
properFraction.-4/3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i2 ((\i0 -> i7 (i4 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (\i0 -> i1 i3 1))) (i1 (\i0 -> \i0 -> (\i0 -> force (force ifThenElse (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (force ifThenElse (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1)))) (i1 (i2 (\i0 -> i1 4 1) (\i0 -> i1 3 1))) (\i0 -> \i0 -> force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (equalsInteger i2 (subtractInteger 0 1)) (delay ((\i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> equalsInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (i3 (i4 (\i0 -> i1 1 1) (\i0 -> i1 3 1)))))))) (\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger 0 i3) i2))) (\i0 -> \i0 -> i3 (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i7 i2 i1) (i8 i3 i2)) (i8 i2 i1)) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2))))) (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))))
data.id.0.5 (program 1.0.0 (\i0 -> i1 1 2))
data.id.2 (program 1.0.0 (\i0 -> i1 2 1))
data.id.11/3 (program 1.0.0 ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (force ifThenElse (equalsInteger i2 0) (delay 0) (delay (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (force ifThenElse (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (force ifThenElse (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 11 1) (\i0 -> i1 3 1)))