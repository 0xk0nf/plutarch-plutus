fst.exa1 (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> i2)) (\i0 -> i1 1 (\i0 -> i1 2 1))))
snd.exa1 (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> i1)) (\i0 -> i1 1 (\i0 -> i1 2 1))))
first.exa1 (program 1.0.0 ((\i0 -> \i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (i5 i3) i2)) (\i0 -> multiplyInteger i1 2) (\i0 -> i1 1 (\i0 -> i1 2 1))))
second.exa1 (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 i3 (i5 i2))) (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i7 (equalsInteger i2 0) (delay 0) (delay (force (i7 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i13 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i9 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i6 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i3) (multiplyInteger i4 i2))))) (\i0 -> i1 2 1)) (\i0 -> i1 1 (\i0 -> i1 2 1))) (force ifThenElse)))