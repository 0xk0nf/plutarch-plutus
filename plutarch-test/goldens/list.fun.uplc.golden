pnull.empty (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> False) (delay True)) ((\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3) (force headList i1) (i2 (force tailList i1)))))) [])))
pnull.nonempty (program 1.0.0 ((\i0 -> force ifThenElse i1 False True) ((\i0 -> i1 (\i0 -> \i0 -> False) (delay True)) ((\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3) (force headList i1) (i2 (force tailList i1)))))) [1,2,3,4,5,6,7,8,9,10]))))
pconcat.identity (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i7 i2 (i4 i1)) (delay i3)) i2) ((\i0 -> i2 i1 (\i0 -> \i0 -> force i1)) 0) (\i0 -> \i0 -> force i1)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
plength (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (addInteger i4 1) i1) (delay i2)) 0 (i1 (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3) (force headList i1) (i2 (force tailList i1)))))) [1,2,3,4,5,6,7,8,9,10])) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))))
pelem (program 1.0.0 ((\i0 -> (\i0 -> i2 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force (force ifThenElse (equalsInteger i2 i5) (delay True) (delay (i4 i1)))) (delay False))) 5 (i1 (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3) (force headList i1) (i2 (force tailList i1)))))) [1,2,3,4,5,6,7,8,9,10])) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))))
pall (program 1.0.0 ((\i0 -> (\i0 -> i2 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (i5 i2) (delay (i4 i1)))) (delay True))) (\i0 -> False) (i1 (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3) (force headList i1) (i2 (force tailList i1)))))) [1,2,3,4,5,6,7,8,9,10])) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))))
plistEquals.true (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> force (force ifThenElse (equalsInteger i4 i2) (delay (i7 i3 i1)) (delay False))) (delay False)) (delay (i1 (\i0 -> \i0 -> False) (delay True)))) (i1 i7) (i1 i7)) (i1 (\i0 -> \i0 -> force (i4 i1 (delay (\i0 -> \i0 -> force i1)) (delay (i5 (i6 i1) (i2 (i7 i1)))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)) (force headList)) (force tailList)) [1,2,3,4,5,6,7,8,9,10]))
plistEquals.false (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> force (force ifThenElse (equalsInteger i4 i2) (delay (i7 i3 i1)) (delay False))) (delay False)) (delay (i1 (\i0 -> \i0 -> False) (delay True)))) (i1 [1,2,3,4,5,6,7,8,9,10]) (i1 [1,2,3])) (i1 (\i0 -> \i0 -> force (i4 i1 (delay (\i0 -> \i0 -> force i1)) (delay (i5 (i6 i1) (i2 (i7 i1)))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)) (force headList)) (force tailList)))
plistEquals.empty (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> force (force ifThenElse (equalsInteger i4 i2) (delay (i7 i3 i1)) (delay False))) (delay False)) (delay (i1 (\i0 -> \i0 -> False) (delay True)))) (i1 [1,2,3,4,5,6,7,8,9,10]) (i1 [])) (i1 (\i0 -> \i0 -> force (i4 i1 (delay (\i0 -> \i0 -> force i1)) (delay (i5 (i6 i1) (i2 (i7 i1)))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)) (force headList)) (force tailList)))
pmap.eg (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i7 (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> addInteger i1 i1) (i1 (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay (i4 (force headList i1) (i2 (force tailList i1)))))) [1,2,3,4,5,6,7,8,9,10])) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pmap.identity (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3) (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i1) (\i0 -> \i0 -> force i1)))
pfilter.1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force (force ifThenElse (i5 i2) (delay (i7 i2 (i4 i1))) (delay (i4 i1)))) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> equalsInteger (modInteger i1 2) 0) (i1 (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay (i4 (force headList i1) (i2 (force tailList i1)))))) [1,2,3,4,5,6,7,8,9,10])) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pfilter.2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force (force ifThenElse (i5 i2) (delay (i7 i2 (i4 i1))) (delay (i4 i1)))) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> lessThanInteger 5 i1) (i1 (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay (i4 (force headList i1) (i2 (force tailList i1)))))) [1,2,3,4,5,6,7,8,9,10])) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pzipWith (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i11 (addInteger i4 i2) (i7 i3 i1)) (delay (\i0 -> \i0 -> force i1))) (delay (\i0 -> \i0 -> force i1))) (i1 i7) (i1 i7)) (i1 (\i0 -> \i0 -> force (i4 i1 (delay (\i0 -> \i0 -> force i1)) (delay (i5 (i6 i1) (i2 (i7 i1)))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)) (force headList)) (force tailList)) [1,2,3,4,5,6,7,8,9,10]))
pfoldl.primed.nonempty (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (subtractInteger i4 i2) i1) (delay i2)) 0 (i1 (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3) (force headList i1) (i2 (force tailList i1)))))) [1,2,3,4,5,6,7,8,9,10])) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))))
pfoldl.primed.empty (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (subtractInteger i4 i2) i1) (delay i2)) 0 (i1 (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3) (force headList i1) (i2 (force tailList i1)))))) [])) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))))
pfoldl.primed.nonempty (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (subtractInteger i4 i2) i1) (delay i2)) 0 (i1 (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3) (force headList i1) (i2 (force tailList i1)))))) [1,2,3,4,5,6,7,8,9,10])) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))))
pfoldl.primed.empty (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (subtractInteger i4 i2) i1) (delay i2)) 0 (i1 (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3) (force headList i1) (i2 (force tailList i1)))))) [])) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))))