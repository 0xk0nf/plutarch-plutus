insert.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i2 (\i0 -> \i0 -> force (i10 (equalsInteger i7 i2) (delay (i11 (\i0 -> i1 i8 i7) i3)) (delay (force (i10 (lessThanInteger i7 i2) (delay (i11 (\i0 -> i1 i8 i7) (i11 i4 i3))) (delay (i11 i4 (i8 i7 i6 i3))))))))) (delay (i7 (\i0 -> i1 i4 i3) (\i0 -> \i0 -> force i1)))) 1 ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 3 1) (\i0 -> i1 2 1)) (i3 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i3 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
insert.exa2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i2 (\i0 -> \i0 -> force (i10 (equalsInteger i7 i2) (delay (i11 (\i0 -> i1 i8 i7) i3)) (delay (force (i10 (lessThanInteger i7 i2) (delay (i11 (\i0 -> i1 i8 i7) (i11 i4 i3))) (delay (i11 i4 (i8 i7 i6 i3))))))))) (delay (i7 (\i0 -> i1 i4 i3) (\i0 -> \i0 -> force i1)))) 1 ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 3 1) (\i0 -> i1 2 1)) (i3 (\i0 -> i1 2 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 4 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
insert.exa3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i2 (\i0 -> \i0 -> force (i10 (equalsInteger i7 i2) (delay (i11 (\i0 -> i1 i8 i7) i3)) (delay (force (i10 (lessThanInteger i7 i2) (delay (i11 (\i0 -> i1 i8 i7) (i11 i4 i3))) (delay (i11 i4 (i8 i7 i6 i3))))))))) (delay (i7 (\i0 -> i1 i4 i3) (\i0 -> \i0 -> force i1)))) 3 ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 3 1) (\i0 -> i1 2 1)) (i3 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i3 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
insert.exa4 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i2 (\i0 -> \i0 -> force (i10 (equalsInteger i7 i2) (delay (i11 (\i0 -> i1 i8 i7) i3)) (delay (force (i10 (lessThanInteger i7 i2) (delay (i11 (\i0 -> i1 i8 i7) (i11 i4 i3))) (delay (i11 i4 (i8 i7 i6 i3))))))))) (delay (i7 (\i0 -> i1 i4 i3) (\i0 -> \i0 -> force i1)))) 4 ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 3 1) (\i0 -> i1 2 1)) (i3 (\i0 -> i1 2 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 4 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
insert.exa5 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i2 (\i0 -> \i0 -> force (i10 (equalsInteger i7 i2) (delay (i11 (\i0 -> i1 i8 i7) i3)) (delay (force (i10 (lessThanInteger i7 i2) (delay (i11 (\i0 -> i1 i8 i7) (i11 i4 i3))) (delay (i11 i4 (i8 i7 i6 i3))))))))) (delay (i7 (\i0 -> i1 i4 i3) (\i0 -> \i0 -> force i1)))) 5 ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 3 1) (\i0 -> i1 2 1)) (i3 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i3 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
insert.exa6 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i2 (\i0 -> \i0 -> force (i10 (equalsInteger i7 i2) (delay (i11 (\i0 -> i1 i8 i7) i3)) (delay (force (i10 (lessThanInteger i7 i2) (delay (i11 (\i0 -> i1 i8 i7) (i11 i4 i3))) (delay (i11 i4 (i8 i7 i6 i3))))))))) (delay (i7 (\i0 -> i1 i4 i3) (\i0 -> \i0 -> force i1)))) 5 ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 3 1) (\i0 -> i1 2 1)) (i3 (\i0 -> i1 2 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 4 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
lookup.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i2 (\i0 -> \i0 -> force (i10 (equalsInteger i6 i2) (delay (\i0 -> \i0 -> i2 i3)) (delay (force (i10 (lessThanInteger i6 i2) (delay (\i0 -> \i0 -> force i1)) (delay (i7 i6 i3)))))))) (delay (\i0 -> \i0 -> force i1))) i2 i1) 1 (i2 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i2 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i2 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
lookup.exa2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i2 (\i0 -> \i0 -> force (i10 (equalsInteger i6 i2) (delay (\i0 -> \i0 -> i2 i3)) (delay (force (i10 (lessThanInteger i6 i2) (delay (\i0 -> \i0 -> force i1)) (delay (i7 i6 i3)))))))) (delay (\i0 -> \i0 -> force i1))) i2 i1) 2 (i2 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i2 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i2 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
lookup.exa3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i2 (\i0 -> \i0 -> force (i10 (equalsInteger i6 i2) (delay (\i0 -> \i0 -> i2 i3)) (delay (force (i10 (lessThanInteger i6 i2) (delay (\i0 -> \i0 -> force i1)) (delay (i7 i6 i3)))))))) (delay (\i0 -> \i0 -> force i1))) i2 i1) 5 (i2 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i2 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i2 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
lookup.exa4 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i2 (\i0 -> \i0 -> force (i10 (equalsInteger i6 i2) (delay (\i0 -> \i0 -> i2 i3)) (delay (force (i10 (lessThanInteger i6 i2) (delay (\i0 -> \i0 -> force i1)) (delay (i7 i6 i3)))))))) (delay (\i0 -> \i0 -> force i1))) i2 i1) 7 (i2 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i2 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i2 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
unionWithAdd.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i17 (equalsInteger i4 i2) (delay (i18 (\i0 -> i1 i5 (i12 i4 i2)) (i12 i11 i7 i5))) (delay (force (i17 (lessThanInteger i4 i2) (delay (i18 i8 (i12 i11 i7 i9))) (delay (i18 i6 (i12 i11 i10 i5)))))))))) (delay i4)) (delay i1)) i3 i2 i1) (\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (addInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (i3 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i3 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1)))) (i3 (\i0 -> i1 2 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 4 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
unionWithAdd.exa2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i17 (equalsInteger i4 i2) (delay (i18 (\i0 -> i1 i5 (i12 i4 i2)) (i12 i11 i7 i5))) (delay (force (i17 (lessThanInteger i4 i2) (delay (i18 i8 (i12 i11 i7 i9))) (delay (i18 i6 (i12 i11 i10 i5)))))))))) (delay i4)) (delay i1)) i3 i2 i1) (\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (addInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (i3 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i3 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1)))) (i3 (\i0 -> i1 3 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 4 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 5 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
unionWithAdd.exa3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i17 (equalsInteger i4 i2) (delay (i18 (\i0 -> i1 i5 (i12 i4 i2)) (i12 i11 i7 i5))) (delay (force (i17 (lessThanInteger i4 i2) (delay (i18 i8 (i12 i11 i7 i9))) (delay (i18 i6 (i12 i11 i10 i5)))))))))) (delay i4)) (delay i1)) i3 i2 i1) (\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (addInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (i3 (\i0 -> i1 2 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 4 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1)))) (i3 (\i0 -> i1 3 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 4 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 5 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
unionWithSub.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i17 (equalsInteger i4 i2) (delay (i18 (\i0 -> i1 i5 (i12 i4 i2)) (i12 i11 i7 i5))) (delay (force (i17 (lessThanInteger i4 i2) (delay (i18 i8 (i12 i11 i7 i9))) (delay (i18 i6 (i12 i11 i10 i5)))))))))) (delay i4)) (delay i1)) i3 i2 i1) (\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (i3 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i3 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1)))) (i3 (\i0 -> i1 2 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 4 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
unionWithSub.exa2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i17 (equalsInteger i4 i2) (delay (i18 (\i0 -> i1 i5 (i12 i4 i2)) (i12 i11 i7 i5))) (delay (force (i17 (lessThanInteger i4 i2) (delay (i18 i8 (i12 i11 i7 i9))) (delay (i18 i6 (i12 i11 i10 i5)))))))))) (delay i4)) (delay i1)) i3 i2 i1) (\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (i3 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i3 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1)))) (i3 (\i0 -> i1 3 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 4 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 5 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
unionWithSub.exa3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i17 (equalsInteger i4 i2) (delay (i18 (\i0 -> i1 i5 (i12 i4 i2)) (i12 i11 i7 i5))) (delay (force (i17 (lessThanInteger i4 i2) (delay (i18 i8 (i12 i11 i7 i9))) (delay (i18 i6 (i12 i11 i10 i5)))))))))) (delay i4)) (delay i1)) i3 i2 i1) (\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (subtractInteger (multiplyInteger i5 i2) (multiplyInteger i3 i4)) (multiplyInteger i4 i2))))) (i3 (\i0 -> i1 2 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 4 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1)))) (i3 (\i0 -> i1 3 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 4 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 5 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
filterWithKey.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force (i8 (i5 i2) (delay (i9 i2 (i4 i1))) (delay (i4 i1)))) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i1 (\i0 -> \i0 -> i5 i2 i1)) i1) (\i0 -> \i0 -> force ((\i0 -> \i0 -> i5 i2 i1 (delay False)) (equalsInteger (modInteger i2 2) 0) (delay ((\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> lessThanInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (\i0 -> i1 0 1) i1)))) (i2 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i2 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i2 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
filterWithKey.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force (i8 (i5 i2) (delay (i9 i2 (i4 i1))) (delay (i4 i1)))) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i1 (\i0 -> \i0 -> i5 i2 i1)) i1) (\i0 -> \i0 -> force ((\i0 -> \i0 -> i5 i2 i1 (delay False)) (equalsInteger (modInteger i2 2) 0) (delay ((\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> lessThanInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (\i0 -> i1 0 1) i1)))) (i2 (\i0 -> i1 2 (\i0 -> i1 1 1)) (i2 (\i0 -> i1 3 (\i0 -> i1 1 2)) (i2 (\i0 -> i1 4 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
filterWithKey.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force (i8 (i5 i2) (delay (i9 i2 (i4 i1))) (delay (i4 i1)))) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i1 (\i0 -> \i0 -> i5 i2 i1)) i1) (\i0 -> \i0 -> force ((\i0 -> \i0 -> i5 i2 i1 (delay False)) (equalsInteger (modInteger i2 2) 0) (delay ((\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> lessThanInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (\i0 -> i1 0 1) i1)))) (i2 (\i0 -> i1 3 (\i0 -> i1 1 1)) (i2 (\i0 -> i1 4 (\i0 -> i1 1 2)) (i2 (\i0 -> i1 5 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
findWithDefault.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i2 (\i0 -> \i0 -> force (i11 (equalsInteger i6 i2) (delay (\i0 -> \i0 -> i2 i3)) (delay (force (i11 (lessThanInteger i6 i2) (delay (\i0 -> \i0 -> force i1)) (delay (i7 i6 i3)))))))) (delay (\i0 -> \i0 -> force i1))) i2 i1 (\i0 -> i1) (delay i3)) (\i0 -> i1 100 1) 1 (i2 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i2 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i2 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
findWithDefault.exa2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i2 (\i0 -> \i0 -> force (i11 (equalsInteger i6 i2) (delay (\i0 -> \i0 -> i2 i3)) (delay (force (i11 (lessThanInteger i6 i2) (delay (\i0 -> \i0 -> force i1)) (delay (i7 i6 i3)))))))) (delay (\i0 -> \i0 -> force i1))) i2 i1 (\i0 -> i1) (delay i3)) (\i0 -> i1 100 1) 2 (i2 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i2 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i2 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
findWithDefault.exa3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i2 (\i0 -> \i0 -> force (i11 (equalsInteger i6 i2) (delay (\i0 -> \i0 -> i2 i3)) (delay (force (i11 (lessThanInteger i6 i2) (delay (\i0 -> \i0 -> force i1)) (delay (i7 i6 i3)))))))) (delay (\i0 -> \i0 -> force i1))) i2 i1 (\i0 -> i1) (delay i3)) (\i0 -> i1 100 1) 6 (i2 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i2 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i2 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
adjust.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> \i0 -> (\i0 -> i6 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i12 (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 i3 (i6 i3 i2))) i1) (\i0 -> \i0 -> force (i6 (i5 (\i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> force (i13 (i4 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force ((\i0 -> \i0 -> i19 i2 i1 (delay False)) (equalsInteger i4 i2) (delay (i3 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> equalsInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3))))))))) (delay (i7 i3 i1)) (delay False))) (delay False)) (delay (i1 (\i0 -> \i0 -> False) (delay True)))) i3 i2) (delay (i4 i1)) (delay i1)))) (\i0 -> multiplyInteger i1 3) (i3 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i3 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
adjust.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> \i0 -> (\i0 -> i6 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i12 (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 i3 (i6 i3 i2))) i1) (\i0 -> \i0 -> force (i6 (i5 (\i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> force (i13 (i4 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force ((\i0 -> \i0 -> i19 i2 i1 (delay False)) (equalsInteger i4 i2) (delay (i3 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> equalsInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3))))))))) (delay (i7 i3 i1)) (delay False))) (delay False)) (delay (i1 (\i0 -> \i0 -> False) (delay True)))) i3 i2) (delay (i4 i1)) (delay i1)))) (\i0 -> multiplyInteger i1 5) (i3 (\i0 -> i1 2 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 4 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
mapWithKey.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> i4 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i10 (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 i3 (i6 i3 i2))) i1) (\i0 -> \i0 -> (\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i10 (equalsInteger i2 0) (delay 0) (delay (force (i10 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i12 (\i0 -> \i0 -> \i0 -> force (i16 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i12 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i11 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i10 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i3) (multiplyInteger i4 i2))))) (\i0 -> i1 i3 1) i1) (i3 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i3 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
mapWithKey.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> i4 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i10 (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 i3 (i6 i3 i2))) i1) (\i0 -> \i0 -> (\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i10 (equalsInteger i2 0) (delay 0) (delay (force (i10 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i12 (\i0 -> \i0 -> \i0 -> force (i16 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i12 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i11 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i10 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i3) (multiplyInteger i4 i2))))) (\i0 -> i1 i3 1) i1) (i3 (\i0 -> i1 2 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 4 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
msingleton.exa1 (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i2 i4 i3) (\i0 -> \i0 -> force i1)) (\i0 -> i1 i3 i2)) 0 ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i7 (equalsInteger i2 0) (delay 0) (delay (force (i7 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i13 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i9 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i6 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 1 1) (\i0 -> i1 2 1))) (force ifThenElse)))
msingleton.exa2 (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i2 i4 i3) (\i0 -> \i0 -> force i1)) (\i0 -> i1 i3 i2)) 1 ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i7 (equalsInteger i2 0) (delay 0) (delay (force (i7 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i13 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i9 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i6 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i2) (multiplyInteger i4 i3))))) (\i0 -> i1 3 1) (\i0 -> i1 2 1))) (force ifThenElse)))
mmap.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> i4 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i10 (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 i3 (i6 i2))) i1) (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i3) (multiplyInteger i4 i2))))) (\i0 -> i1 2 1)) (i3 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i3 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
mmap.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> i4 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i10 (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 i3 (i6 i2))) i1) (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 (multiplyInteger i2 (divideInteger i5 i3)) (multiplyInteger i2 (divideInteger i4 i3))) (force (i8 (equalsInteger i2 0) (delay 0) (delay (force (i8 (lessThanEqualsInteger i2 0) (delay (subtractInteger 0 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i10 (\i0 -> \i0 -> \i0 -> force (i14 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i10 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i9 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (force (i8 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))) (force (i7 (lessThanEqualsInteger i2 (subtractInteger 0 1)) (delay (subtractInteger 0 i2)) (delay i2)))))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (multiplyInteger i5 i3) (multiplyInteger i4 i2))))) (\i0 -> i1 3 1)) (i3 (\i0 -> i1 2 (\i0 -> i1 1 1)) (i3 (\i0 -> i1 3 (\i0 -> i1 1 2)) (i3 (\i0 -> i1 4 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
mall.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (i6 i2) (delay (i4 i1)))) (delay True)) ((\i0 -> i4 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i9 (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i1 (\i0 -> \i0 -> i1)) i1)) (\i0 -> (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> lessThanInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (\i0 -> i1 0 1) i1) (i2 (\i0 -> i1 1 (\i0 -> i1 0 1)) (i2 (\i0 -> i1 3 (\i0 -> i1 2 3)) (i2 (\i0 -> i1 5 (\i0 -> i1 7 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
mall.exa2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (i6 i2) (delay (i4 i1)))) (delay True)) ((\i0 -> i4 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i9 (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i1 (\i0 -> \i0 -> i1)) i1)) (\i0 -> (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> lessThanInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (\i0 -> i1 0 1) i1) (i2 (\i0 -> i1 2 (\i0 -> i1 1 1)) (i2 (\i0 -> i1 3 (\i0 -> i1 1 2)) (i2 (\i0 -> i1 4 (\i0 -> i1 8 1)) (\i0 -> \i0 -> force i1))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))