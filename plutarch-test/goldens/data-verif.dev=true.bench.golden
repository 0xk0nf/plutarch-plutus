erroneous.(String, Integer) /= (String, String) {"exBudgetCPU":2400100,"exBudgetMemory":612,"scriptSizeBytes":123}
erroneous.[String] /= [Integer] {"exBudgetCPU":1350100,"exBudgetMemory":388,"scriptSizeBytes":101}
erroneous.A { test := Integer, test2 := Integer } /= { test := String, test2 := Integer } {"exBudgetCPU":1200100,"exBudgetMemory":356,"scriptSizeBytes":128}
erroneous.Map Int String /= Map Int Int {"exBudgetCPU":2100100,"exBudgetMemory":548,"scriptSizeBytes":165}
erroneous.PDataSum constr 2 {"exBudgetCPU":737969,"exBudgetMemory":230,"scriptSizeBytes":197}
erroneous.PDataSum wrong record type {"exBudgetCPU":875838,"exBudgetMemory":232,"scriptSizeBytes":256}
working.(String, String) == (String, String) {"exBudgetCPU":8339682,"exBudgetMemory":14428,"scriptSizeBytes":123}
working.[String] == [String] {"exBudgetCPU":8093553,"exBudgetMemory":16904,"scriptSizeBytes":114}
working.A { test := Integer, test2 := Integer } == { test := Integer, test2 := Integer } {"exBudgetCPU":5439216,"exBudgetMemory":9876,"scriptSizeBytes":122}
working.A { test := Integer, test2 := Integer } == [Integer] {"exBudgetCPU":5439216,"exBudgetMemory":9876,"scriptSizeBytes":122}
working.A { test := String, test2 := Integer } == { test := String, test2 := Integer } {"exBudgetCPU":5528535,"exBudgetMemory":10176,"scriptSizeBytes":128}
working.Map Int String == Map Int String {"exBudgetCPU":12939479,"exBudgetMemory":23744,"scriptSizeBytes":165}
working.PDataSum constr 0 {"exBudgetCPU":4704588,"exBudgetMemory":10722,"scriptSizeBytes":256}
working.PDataSum constr 1 {"exBudgetCPU":5199733,"exBudgetMemory":11924,"scriptSizeBytes":256}
working.recover PWrapInt {"exBudgetCPU":705925,"exBudgetMemory":1065,"scriptSizeBytes":15}
recovering a record partially vs completely.partially {"exBudgetCPU":5229670,"exBudgetMemory":9644,"scriptSizeBytes":124}
recovering a record partially vs completely.completely {"exBudgetCPU":5528535,"exBudgetMemory":10176,"scriptSizeBytes":128}
removing the data wrapper.erroneous.(String, Integer) /= (String, String) {"exBudgetCPU":2400100,"exBudgetMemory":612,"scriptSizeBytes":117}
removing the data wrapper.erroneous.[String] /= [Integer] {"exBudgetCPU":1350100,"exBudgetMemory":388,"scriptSizeBytes":114}
removing the data wrapper.working.(String, String) == (String, String) {"exBudgetCPU":8339682,"exBudgetMemory":14428,"scriptSizeBytes":123}
removing the data wrapper.working.[String] == [String] {"exBudgetCPU":8093553,"exBudgetMemory":16904,"scriptSizeBytes":114}
removing the data wrapper.partial checks.check whole structure {"exBudgetCPU":287941468,"exBudgetMemory":531268,"scriptSizeBytes":1524}
removing the data wrapper.partial checks.check structure partly {"exBudgetCPU":101880233,"exBudgetMemory":145544,"scriptSizeBytes":1494}
removing the data wrapper.recovering a nested record.succeeds {"exBudgetCPU":6214449,"exBudgetMemory":12008,"scriptSizeBytes":142}
removing the data wrapper.recovering a nested record.fails {"exBudgetCPU":1500100,"exBudgetMemory":420,"scriptSizeBytes":142}
removing the data wrapper.recovering a nested record.sample usage contains the right value {"exBudgetCPU":5304587,"exBudgetMemory":10849,"scriptSizeBytes":132}
example.concatenate two lists, legal {"exBudgetCPU":54902566,"exBudgetMemory":104923,"scriptSizeBytes":1096}
example.concatenate two lists, illegal (list too short) {"exBudgetCPU":47817778,"exBudgetMemory":84729,"scriptSizeBytes":1089}
example.concatenate two lists, illegal (wrong elements in list) {"exBudgetCPU":55052566,"exBudgetMemory":104955,"scriptSizeBytes":1096}
example.concatenate two lists, illegal (more than one output) {"exBudgetCPU":35172714,"exBudgetMemory":63384,"scriptSizeBytes":1117}
example2.recovering a record succeeds {"exBudgetCPU":7365735,"exBudgetMemory":14942,"scriptSizeBytes":341}