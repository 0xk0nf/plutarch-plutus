rational.1/2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> appendString (i4 i2) (appendString "/" (i4 i1)))) ((\i0 -> \i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i24 (equalsInteger i2 0) (delay 0) (delay (force (i24 (lessThanEqualsInteger i2 0) (delay (i23 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i24 (\i0 -> \i0 -> \i0 -> force (i30 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) i2 i1) (force (i26 (lessThanEqualsInteger i3 i2) (delay i3) (delay i2)))) (force (i25 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (i22 i2)) (i21 i2)))) (i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> force (i26 (equalsInteger i2 0) (delay (force (force trace "pfailOnZero: division by 0" (delay error)))) (delay i1))) ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) (multiplyInteger i3 i2))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2))) (i14 (\i0 -> \i0 -> appendString (force (i19 (lessThanInteger i1 0) (delay i3) (delay i4))) ((\i0 -> (\i0 -> force (i21 (equalsInteger i2 0) (delay (i7 i1)) (delay ((\i0 -> appendString i1 (i8 i2)) (i4 i2))))) (remainderInteger (i18 i2) 10)) (quotientInteger (i17 i1) 10))))) "-") "") (\i0 -> force (i15 (equalsInteger i1 0) (delay i2) (delay (force (i15 (equalsInteger i1 1) (delay i3) (delay (force (i15 (equalsInteger i1 2) (delay i4) (delay (force (i15 (equalsInteger i1 3) (delay i5) (delay (force (i15 (equalsInteger i1 4) (delay i6) (delay (force (i15 (equalsInteger i1 5) (delay i7) (delay (force (i15 (equalsInteger i1 6) (delay i8) (delay (force (i15 (equalsInteger i1 7) (delay i9) (delay (force (i15 (equalsInteger i1 8) (delay i10) (delay (force (i15 (equalsInteger i1 9) (delay i11) (delay error))))))))))))))))))))))))))))))) "0") "1") "2") "3") "4") "5") "6") "7") "8") "9") (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> force (i3 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (force ifThenElse)))
