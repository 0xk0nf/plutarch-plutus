erroneous.(String, Integer) /= (String, String) {"exBudgetCPU":2400100,"exBudgetMemory":612,"scriptSizeBytes":123}
erroneous.[String] /= [Integer] {"exBudgetCPU":1350100,"exBudgetMemory":388,"scriptSizeBytes":101}
erroneous.A { test := Integer, test2 := Integer } /= { test := String, test2 := Integer } {"exBudgetCPU":1200100,"exBudgetMemory":356,"scriptSizeBytes":139}
erroneous.Map Int String /= Map Int Int {"exBudgetCPU":2100100,"exBudgetMemory":548,"scriptSizeBytes":165}
erroneous.PDataSum constr 2 {"exBudgetCPU":587969,"exBudgetMemory":198,"scriptSizeBytes":215}
erroneous.PDataSum wrong record type {"exBudgetCPU":1025838,"exBudgetMemory":264,"scriptSizeBytes":307}
working.(String, String) == (String, String) {"exBudgetCPU":8339682,"exBudgetMemory":14428,"scriptSizeBytes":123}
working.[String] == [String] {"exBudgetCPU":8093553,"exBudgetMemory":16904,"scriptSizeBytes":114}
working.A { test := Integer, test2 := Integer } == { test := Integer, test2 := Integer } {"exBudgetCPU":6636946,"exBudgetMemory":11068,"scriptSizeBytes":133}
working.A { test := Integer, test2 := Integer } == [Integer] {"exBudgetCPU":6636946,"exBudgetMemory":11068,"scriptSizeBytes":133}
working.A { test := String, test2 := Integer } == { test := String, test2 := Integer } {"exBudgetCPU":6726265,"exBudgetMemory":11368,"scriptSizeBytes":139}
working.Map Int String == Map Int String {"exBudgetCPU":12939479,"exBudgetMemory":23744,"scriptSizeBytes":165}
working.PDataSum constr 0 {"exBudgetCPU":6859594,"exBudgetMemory":13242,"scriptSizeBytes":307}
working.PDataSum constr 1 {"exBudgetCPU":7863150,"exBudgetMemory":15208,"scriptSizeBytes":307}
recovering a record partially vs completely.partially {"exBudgetCPU":6008308,"exBudgetMemory":10372,"scriptSizeBytes":131}
recovering a record partially vs completely.completely {"exBudgetCPU":6726265,"exBudgetMemory":11368,"scriptSizeBytes":139}
removing the data wrapper.erroneous.(String, Integer) /= (String, String) {"exBudgetCPU":2400100,"exBudgetMemory":612,"scriptSizeBytes":117}
removing the data wrapper.erroneous.[String] /= [Integer] {"exBudgetCPU":1350100,"exBudgetMemory":388,"scriptSizeBytes":114}
removing the data wrapper.working.(String, String) == (String, String) {"exBudgetCPU":8339682,"exBudgetMemory":14428,"scriptSizeBytes":123}
removing the data wrapper.working.[String] == [String] {"exBudgetCPU":8093553,"exBudgetMemory":16904,"scriptSizeBytes":114}
removing the data wrapper.partial checks.check whole structure {"exBudgetCPU":287941468,"exBudgetMemory":531268,"scriptSizeBytes":1524}
removing the data wrapper.partial checks.check structure partly {"exBudgetCPU":101880233,"exBudgetMemory":145544,"scriptSizeBytes":1494}
checking PValue and PMap for validity.PMap.valid0 {"exBudgetCPU":13804861,"exBudgetMemory":25916,"scriptSizeBytes":169}
checking PValue and PMap for validity.PMap.invalid1 {"exBudgetCPU":2880288,"exBudgetMemory":678,"scriptSizeBytes":169}
checking PValue and PMap for validity.PMap.invalid2 {"exBudgetCPU":12645264,"exBudgetMemory":21418,"scriptSizeBytes":190}
checking PValue and PMap for validity.PValue.valid0 {"exBudgetCPU":7607387,"exBudgetMemory":19388,"scriptSizeBytes":137}
checking PValue and PMap for validity.PValue.invalid1 {"exBudgetCPU":2310477,"exBudgetMemory":521,"scriptSizeBytes":153}
example.concatenate two lists, legal {"exBudgetCPU":56427118,"exBudgetMemory":107515,"scriptSizeBytes":1115}
example.concatenate two lists, illegal (list too short) {"exBudgetCPU":48627778,"exBudgetMemory":84921,"scriptSizeBytes":1108}
example.concatenate two lists, illegal (wrong elements in list) {"exBudgetCPU":55862566,"exBudgetMemory":105147,"scriptSizeBytes":1115}
example.concatenate two lists, illegal (more than one output) {"exBudgetCPU":35982714,"exBudgetMemory":63576,"scriptSizeBytes":1136}
example2.recovering a record succeeds {"exBudgetCPU":9312330,"exBudgetMemory":16762,"scriptSizeBytes":399}