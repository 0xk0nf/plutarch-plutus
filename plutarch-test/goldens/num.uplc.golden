product.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> multiplyInteger i2 (i4 i1)) (delay i3))) 1 (i1 1 (i1 2 (i1 3 (i1 4 (i1 5 (i1 6 (i1 7 (i1 8 (i1 9 (i1 10 (\i0 -> \i0 -> force i1)))))))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
product.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> multiplyInteger i2 (i4 i1)) (delay i3))) 1 (\i0 -> \i0 -> force i1)))
sum.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> addInteger i2 (i4 i1)) (delay i3))) 0 (i1 1 (i1 2 (i1 3 (i1 4 (i1 5 (i1 6 (i1 7 (i1 8 (i1 9 (i1 10 (\i0 -> \i0 -> force i1)))))))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
sum.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> addInteger i2 (i4 i1)) (delay i3))) 0 (\i0 -> \i0 -> force i1)))
exp.rational.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> force (i5 (lessThanInteger i1 0) (delay error) (delay (i2 (\i0 -> \i0 -> \i0 -> i1 (i6 i3 i4) (i6 i2 i4)))))) (\i0 -> i1 4 3) 100) (i1 (\i0 -> \i0 -> \i0 -> force (i5 (equalsInteger i1 0) (delay 1) (delay (multiplyInteger (force (i5 (i6 i1) (delay i2) (delay 1))) (i7 (i3 i2 (divideInteger i1 2))))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> equalsInteger (modInteger i1 2) 1)) (\i0 -> multiplyInteger i1 i1)))
exp.rational.exa1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> force (i5 (lessThanInteger i1 0) (delay error) (delay (i2 (\i0 -> \i0 -> \i0 -> i1 (i6 i3 i4) (i6 i2 i4)))))) (\i0 -> i1 1 2) 0) (i1 (\i0 -> \i0 -> \i0 -> force (i5 (equalsInteger i1 0) (delay 1) (delay (multiplyInteger (force (i5 (i6 i1) (delay i2) (delay 1))) (i7 (i3 i2 (divideInteger i1 2))))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> equalsInteger (modInteger i1 2) 1)) (\i0 -> multiplyInteger i1 i1)))
exp.integer.exa1 (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> force (i3 (lessThanInteger i1 0) (delay error) (delay ((\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i6 (equalsInteger i1 0) (delay 1) (delay (multiplyInteger (force (i6 (equalsInteger (modInteger i1 2) 1) (delay i2) (delay 1))) ((\i0 -> multiplyInteger i1 i1) (i3 i2 (divideInteger i1 2))))))) i2 i1)))) 4 100) (force ifThenElse)))
exp.integer.exa1 (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> force (i3 (lessThanInteger i1 0) (delay error) (delay ((\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i6 (equalsInteger i1 0) (delay 1) (delay (multiplyInteger (force (i6 (equalsInteger (modInteger i1 2) 1) (delay i2) (delay 1))) ((\i0 -> multiplyInteger i1 i1) (i3 i2 (divideInteger i1 2))))))) i2 i1)))) 2 0) (force ifThenElse)))